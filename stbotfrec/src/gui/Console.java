/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.sun.glass.events.KeyEvent;
import init.Main;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author AP
 */
public class Console extends javax.swing.JPanel {

    ArrayList<String> commands = new ArrayList<String>();
    int cmdIndex = 0;
    
    /**
     * Creates new form Console
     */
    public Console() {
        initComponents();
        
        textInput.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, 0), "previous console command");

        textInput.getActionMap().put("previous console command", new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if (commands.isEmpty()) return;
                
                cmdIndex = Math.max(0, cmdIndex - 1);
                
                textInput.setText(commands.get(cmdIndex));
                textInput.setCaretPosition(textInput.getText().length());
            }
        });
        
        textInput.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, 0), "next console command");

        textInput.getActionMap().put("next console command", new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if (commands.isEmpty()) return;
                
                cmdIndex = Math.min(commands.size(), cmdIndex + 1);
                
                if (cmdIndex >= commands.size())
                {
                    textInput.setText("");
                }
                else
                {
                    textInput.setText(commands.get(cmdIndex));
                    textInput.setCaretPosition(textInput.getText().length());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textInput = new javax.swing.JTextField();
        scrollHistory = new javax.swing.JScrollPane();
        history = new javax.swing.JTextArea();

        setOpaque(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        textInput.setBackground(new java.awt.Color(0, 0, 0, 176));
        textInput.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        textInput.setForeground(new java.awt.Color(255, 255, 255));
        textInput.setToolTipText("");
        textInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        textInput.setCaretColor(new java.awt.Color(255, 255, 255));
        textInput.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        textInput.setSelectionColor(new java.awt.Color(153, 153, 153));
        textInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInputActionPerformed(evt);
            }
        });
        add(textInput, java.awt.BorderLayout.PAGE_END);

        scrollHistory.setOpaque(false);

        history.setEditable(false);
        history.setBackground(new java.awt.Color(0, 0, 0, 176));
        history.setColumns(20);
        history.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        history.setForeground(new java.awt.Color(255, 255, 255));
        history.setLineWrap(true);
        history.setRows(5);
        history.setBorder(null);
        scrollHistory.setViewportView(history);

        add(scrollHistory, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        textInput.requestFocusInWindow();
    }//GEN-LAST:event_formFocusGained

    private void textInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInputActionPerformed
        String cmd = textInput.getText();
        
        if (cmd.length() > 0)
        {
            history.append(cmd + "\n");
            commands.add(cmd);
            cmdIndex = commands.size();
            
            Object val = Main.CI.runCommand(null, null, cmd);
            
            history.append(">>> " + val + "\n");
            
            textInput.setText("");
        }
    }//GEN-LAST:event_textInputActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea history;
    private javax.swing.JScrollPane scrollHistory;
    private javax.swing.JTextField textInput;
    // End of variables declaration//GEN-END:variables
}
